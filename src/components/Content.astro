<section id="hello">
  <p class="text-6xl">Evolution of the <span class="font-bold text-lime-600">JS</span> toolchain</p>
  <p class="text-4xl text-right pr-12">from <code class="font-bold text-shadow-lime-700 text-shadow-lg">jsmin</code> to <code class="font-bold text-shadow-lime-700 text-shadow-lg">vite</code></p>
</section>

<section id="about-me">
  I am <code class="text-lime-600">@debelbot</code>
</section>

<section id="in-the-beginning">
  static html
</section>

<section id="the-birth-of-js">
  crazy 90s web design
</section>

<section id="the-birth-of-js">
  crazy 90s web design
</section>

<section id="enter-the-professionals">
  established, but non-specific tools:
  - make
  - Apache Ant
  - Ruby Rake
  - custom shell / perl scripts
</section>

<section id="the-godfather-of-js">
  2002: Doug Crockford creates jslint, jsmin

  JavaScript starts to be seen as a real language
</section>

<section id="node-js">
  2009: node.js
  server side javascript done right
</section>

<section id="cambrian-explosion">
  2010-2016: The "cambrian explosion" of js tools
</section>

<section id="browserify">
  2011: Browserify
  The first JS bundler
</section>

<section id="need-for-speed">
  2011: Emscripten
</section>

<section id="js-linux">
  2011: JSLinux
  the birth of in-browser VMs
</section>

<section id="grunt">
  2012: Grunt
  The first purpose built js task runner
</section>

<section id="webpack">
  2012: webpack
  still popular today
</section>

<section id="typescript">
  2012: typescript
  the most helpful but annoying linter
</section>

<section id="esprima">
  // maybe skip this one?
  2012: esprima
  parsing js code into an ast
</section>

<section id="gulp">
  2013: Gulp
  A better API
</section>

<section id="eslint">
  2013: Eslint
  One linter to rule them all
</section>

<section id="desktop-js">
  2013: Electron
  Now your desktop app can be slow and bloated too!
</section>

<section id="babel">
  2014: Babel
  With the rapid evolution of the language
  came the need for transpilation
  opening the gates for new syntax (e.g. JSX)
</section>

<section id="the-rise-of-serverless">
  2014: AWS Lambda
  the rise of serverless
</section>

<section id="rollup">
  2015: rollup
  it's all about speed
</section>

<section id="parcel">
  2017: parcel
</section>

<section id="wasm">
  2017: enter wasm
</section>

<section id="modern-days">
  2019-2025: the world runs on js
</section>

<section id="esbuild">
  2020: esbuild
</section>

<section id="vite">
  2020: vite
</section>

<section id="deno">
  2020: deno
  Ryan Dahl strikes again!
</section>

<section id="bun">
  2021: bun
  FAST js runtime written in zig, running with JavaScriptCore (instead of v8)
</section>

<section id="biome">
  2023: vite
</section>

<section id="runtime-proliferation">
  almost all major platforms have their own js runtimes:
    - edge workers
    - serverless functions
</section>

<section id="whats-next">
  Where is the tooling going next?
</section>

<section id="lessons-learned">
  Lessons learned
</section>

<section id="repeating-the-main-point">
</section>

<section id="thank-you">
  Thank you!
</section>

